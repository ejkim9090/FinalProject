package kh.spring.s02.common;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

@Service
@Aspect
public class AdviceLog {
	// * 1개 이상이 존재함. 
	// .. 0개 이상이 존재함.
	@Pointcut("execution(public * kh.spring.s02..*Controller.*(..))")
	public void controllerPointCut() {}
	//위 pointcut의 이름은 "controllerPointCut()"
	
	
	@Pointcut("execution(public * kh.spring.s02..*Dao.*(..))")
	public void daoPointCut() {}
	
	@Pointcut("execution(public * kh.spring.s02..*ServiceImpl.*(..))")
	public void serviceImplPointCut() {}
	
	@Before("controllerPointCut()")
	public void beforeControllerPointCut(JoinPoint jp) {
		
		Object[] args = jp.getArgs();
		for(int i=0;i<args.length;i++) {
			System.out.println("args["+i+"]: " +args[i]);
		}
		System.out.println("컨트롤러 모든 메소드가 호출되면 해당(타깃) 메소드가 실행되기 "
				+ "전 Before 바로 이 메소드.."
				+ "이 부분을 실행하고 컨트롤러의 해당 메소드로 가서 동작함.");
	}
	
	@Around("daoPointCut()")
	public Object aroundDaoPointCut(ProceedingJoinPoint pjp) throws Throwable{
		Object returnObj = null;
		
		Object[] args = pjp.getArgs();
		for(int i=0;i<args.length;i++) {
			System.out.println("args["+i+"]: " +args[i]);
		}
		System.out.println("컨트롤러 모든 메소드가 호출되면 해당(타깃) 메소드가 실행되기 "
				+ "전 Before 바로 이 메소드.."
				+ "이 부분을 실행하고 컨트롤러의 해당 메소드로 가서 동작함.");
		
		//타겟 메소드를 실행
		returnObj = pjp.proceed();
		
		System.out.println("DAO Return: " + returnObj);
		
		return returnObj;
	}
}
